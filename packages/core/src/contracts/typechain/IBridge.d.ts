/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IBridgeInterface extends ethers.utils.Interface {
  functions: {
    "accept(uint256,bytes32,uint8,uint8,bytes,bytes,address,uint64)": FunctionFragment;
    "bridge(uint256,bytes32,uint8,uint8,bytes32,bytes32)": FunctionFragment;
    "estimateFee(uint8,uint8,bytes32,bytes32)": FunctionFragment;
    "getAcceptedRequest(bytes32)": FunctionFragment;
    "getBridgedRequest(bytes32)": FunctionFragment;
    "getNonce()": FunctionFragment;
    "getRef(uint256,uint8,uint8,bytes32,bytes32,address,uint64)": FunctionFragment;
    "getRemoteBridge(uint8)": FunctionFragment;
    "isReceived(bytes32)": FunctionFragment;
    "receive_(bytes)": FunctionFragment;
    "setRemoteBridge(uint8,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accept",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridge",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFee",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAcceptedRequest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgedRequest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRef",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemoteBridge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isReceived",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "receive_", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setRemoteBridge",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "accept", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAcceptedRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgedRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRef", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRemoteBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isReceived", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receive_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRemoteBridge",
    data: BytesLike
  ): Result;

  events: {
    "Accepted(uint256,address,bytes32)": EventFragment;
    "Bridged(uint256,address,bytes32)": EventFragment;
    "Received(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Accepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bridged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
}

export type AcceptedEvent = TypedEvent<
  [BigNumber, string, string] & {
    nonce: BigNumber;
    sender: string;
    ref: string;
  }
>;

export type BridgedEvent = TypedEvent<
  [BigNumber, string, string] & {
    nonce: BigNumber;
    sender: string;
    ref: string;
  }
>;

export type ReceivedEvent = TypedEvent<[string] & { ref: string }>;

export class IBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBridgeInterface;

  functions: {
    accept(
      nonce: BigNumberish,
      ref: BytesLike,
      srcChain: BigNumberish,
      provider: BigNumberish,
      name: BytesLike,
      tld: BytesLike,
      owner: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bridge(
      nonce: BigNumberish,
      ref: BytesLike,
      dstChain: BigNumberish,
      provider: BigNumberish,
      name: BytesLike,
      tld: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estimateFee(
      dstChain: BigNumberish,
      provider: BigNumberish,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAcceptedRequest(
      ref: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, string, string, string, BigNumber] & {
          srcChain: number;
          provider: number;
          tld: string;
          name: string;
          owner: string;
          expiry: BigNumber;
        }
      ]
    >;

    getBridgedRequest(
      ref: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, string, string, string, BigNumber] & {
          dstChain: number;
          provider: number;
          tld: string;
          name: string;
          owner: string;
          expiry: BigNumber;
        }
      ]
    >;

    getNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRef(
      nonce: BigNumberish,
      dstChain: BigNumberish,
      provider: BigNumberish,
      name: BytesLike,
      tld: BytesLike,
      owner: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRemoteBridge(
      chain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isReceived(ref: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    receive_(
      payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRemoteBridge(
      chain: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accept(
    nonce: BigNumberish,
    ref: BytesLike,
    srcChain: BigNumberish,
    provider: BigNumberish,
    name: BytesLike,
    tld: BytesLike,
    owner: string,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bridge(
    nonce: BigNumberish,
    ref: BytesLike,
    dstChain: BigNumberish,
    provider: BigNumberish,
    name: BytesLike,
    tld: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  estimateFee(
    dstChain: BigNumberish,
    provider: BigNumberish,
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAcceptedRequest(
    ref: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, number, string, string, string, BigNumber] & {
      srcChain: number;
      provider: number;
      tld: string;
      name: string;
      owner: string;
      expiry: BigNumber;
    }
  >;

  getBridgedRequest(
    ref: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, number, string, string, string, BigNumber] & {
      dstChain: number;
      provider: number;
      tld: string;
      name: string;
      owner: string;
      expiry: BigNumber;
    }
  >;

  getNonce(overrides?: CallOverrides): Promise<BigNumber>;

  getRef(
    nonce: BigNumberish,
    dstChain: BigNumberish,
    provider: BigNumberish,
    name: BytesLike,
    tld: BytesLike,
    owner: string,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRemoteBridge(
    chain: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isReceived(ref: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  receive_(
    payload: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRemoteBridge(
    chain: BigNumberish,
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accept(
      nonce: BigNumberish,
      ref: BytesLike,
      srcChain: BigNumberish,
      provider: BigNumberish,
      name: BytesLike,
      tld: BytesLike,
      owner: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bridge(
      nonce: BigNumberish,
      ref: BytesLike,
      dstChain: BigNumberish,
      provider: BigNumberish,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    estimateFee(
      dstChain: BigNumberish,
      provider: BigNumberish,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAcceptedRequest(
      ref: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, string, string, BigNumber] & {
        srcChain: number;
        provider: number;
        tld: string;
        name: string;
        owner: string;
        expiry: BigNumber;
      }
    >;

    getBridgedRequest(
      ref: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, string, string, BigNumber] & {
        dstChain: number;
        provider: number;
        tld: string;
        name: string;
        owner: string;
        expiry: BigNumber;
      }
    >;

    getNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getRef(
      nonce: BigNumberish,
      dstChain: BigNumberish,
      provider: BigNumberish,
      name: BytesLike,
      tld: BytesLike,
      owner: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRemoteBridge(
      chain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isReceived(ref: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    receive_(payload: BytesLike, overrides?: CallOverrides): Promise<void>;

    setRemoteBridge(
      chain: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Accepted(uint256,address,bytes32)"(
      nonce?: BigNumberish | null,
      sender?: string | null,
      ref?: BytesLike | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { nonce: BigNumber; sender: string; ref: string }
    >;

    Accepted(
      nonce?: BigNumberish | null,
      sender?: string | null,
      ref?: BytesLike | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { nonce: BigNumber; sender: string; ref: string }
    >;

    "Bridged(uint256,address,bytes32)"(
      nonce?: BigNumberish | null,
      sender?: string | null,
      ref?: BytesLike | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { nonce: BigNumber; sender: string; ref: string }
    >;

    Bridged(
      nonce?: BigNumberish | null,
      sender?: string | null,
      ref?: BytesLike | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { nonce: BigNumber; sender: string; ref: string }
    >;

    "Received(bytes32)"(
      ref?: BytesLike | null
    ): TypedEventFilter<[string], { ref: string }>;

    Received(
      ref?: BytesLike | null
    ): TypedEventFilter<[string], { ref: string }>;
  };

  estimateGas: {
    accept(
      nonce: BigNumberish,
      ref: BytesLike,
      srcChain: BigNumberish,
      provider: BigNumberish,
      name: BytesLike,
      tld: BytesLike,
      owner: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bridge(
      nonce: BigNumberish,
      ref: BytesLike,
      dstChain: BigNumberish,
      provider: BigNumberish,
      name: BytesLike,
      tld: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    estimateFee(
      dstChain: BigNumberish,
      provider: BigNumberish,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAcceptedRequest(
      ref: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridgedRequest(
      ref: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getRef(
      nonce: BigNumberish,
      dstChain: BigNumberish,
      provider: BigNumberish,
      name: BytesLike,
      tld: BytesLike,
      owner: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemoteBridge(
      chain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReceived(ref: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    receive_(
      payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRemoteBridge(
      chain: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accept(
      nonce: BigNumberish,
      ref: BytesLike,
      srcChain: BigNumberish,
      provider: BigNumberish,
      name: BytesLike,
      tld: BytesLike,
      owner: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bridge(
      nonce: BigNumberish,
      ref: BytesLike,
      dstChain: BigNumberish,
      provider: BigNumberish,
      name: BytesLike,
      tld: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    estimateFee(
      dstChain: BigNumberish,
      provider: BigNumberish,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAcceptedRequest(
      ref: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBridgedRequest(
      ref: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRef(
      nonce: BigNumberish,
      dstChain: BigNumberish,
      provider: BigNumberish,
      name: BytesLike,
      tld: BytesLike,
      owner: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemoteBridge(
      chain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReceived(
      ref: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receive_(
      payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRemoteBridge(
      chain: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
