/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HostRecordFacetInterface extends ethers.utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "BRIDGE_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "REGISTRAR_ROLE()": FunctionFragment;
    "ROOT_ROLE()": FunctionFragment;
    "WRAPPER_ROLE()": FunctionFragment;
    "getName(bytes32,bytes32,bytes32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTokenId(bytes,bytes,bytes)": FunctionFragment;
    "getTtl(bytes32,bytes32,bytes32)": FunctionFragment;
    "getUser(bytes32,bytes32,bytes32)": FunctionFragment;
    "getUserExpiry(bytes32,bytes32,bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isExists(bytes32,bytes32,bytes32)": FunctionFragment;
    "isLive(bytes32,bytes32,bytes32)": FunctionFragment;
    "isOperator(bytes32,bytes32,bytes32,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setOperator(bytes32,bytes32,bytes32,address,bool)": FunctionFragment;
    "setRecord(bytes,bytes,bytes,uint16)": FunctionFragment;
    "setUser(bytes32,bytes32,bytes32,address,uint64)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unsetRecord(bytes32,bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BRIDGE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRAR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROOT_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WRAPPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getName",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTtl",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserExpiry",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isExists",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLive",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [BytesLike, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [BytesLike, BytesLike, BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecord",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUser",
    values: [BytesLike, BytesLike, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetRecord",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BRIDGE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRAR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROOT_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WRAPPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTtl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRecord", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetRecord",
    data: BytesLike
  ): Result;

  events: {
    "NewHost(bytes,bytes,bytes,uint16)": EventFragment;
    "RemoveHost(bytes32,bytes32,bytes32)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetHostOperator(bytes32,bytes32,bytes32,address,bool)": EventFragment;
    "SetHostUser(bytes32,bytes32,bytes32,address,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewHost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveHost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHostOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHostUser"): EventFragment;
}

export type NewHostEvent = TypedEvent<
  [string, string, string, number] & {
    host: string;
    name: string;
    tld: string;
    ttl: number;
  }
>;

export type RemoveHostEvent = TypedEvent<
  [string, string, string] & { host: string; name: string; tld: string }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type SetHostOperatorEvent = TypedEvent<
  [string, string, string, string, boolean] & {
    host: string;
    name: string;
    tld: string;
    operator: string;
    approved: boolean;
  }
>;

export type SetHostUserEvent = TypedEvent<
  [string, string, string, string, BigNumber] & {
    host: string;
    name: string;
    tld: string;
    newUser: string;
    expiry: BigNumber;
  }
>;

export class HostRecordFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HostRecordFacetInterface;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    BRIDGE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    REGISTRAR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ROOT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    WRAPPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    getName(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getTokenId(
      host: BytesLike,
      name_: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTtl(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getUser(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserExpiry(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExists(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLive(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOperator(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      operator_: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRecord(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      ttl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUser(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      newUser: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unsetRecord(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  BRIDGE_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  REGISTRAR_ROLE(overrides?: CallOverrides): Promise<string>;

  ROOT_ROLE(overrides?: CallOverrides): Promise<string>;

  WRAPPER_ROLE(overrides?: CallOverrides): Promise<string>;

  getName(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getTokenId(
    host: BytesLike,
    name_: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTtl(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  getUser(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserExpiry(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExists(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLive(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperator(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    operator_: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRecord(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    ttl: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUser(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    newUser: string,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unsetRecord(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    BRIDGE_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    REGISTRAR_ROLE(overrides?: CallOverrides): Promise<string>;

    ROOT_ROLE(overrides?: CallOverrides): Promise<string>;

    WRAPPER_ROLE(overrides?: CallOverrides): Promise<string>;

    getName(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getTokenId(
      host: BytesLike,
      name_: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTtl(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    getUser(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserExpiry(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExists(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLive(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperator(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      operator_: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRecord(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      ttl: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUser(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      newUser: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unsetRecord(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewHost(bytes,bytes,bytes,uint16)"(
      host?: null,
      name?: null,
      tld?: null,
      ttl?: null
    ): TypedEventFilter<
      [string, string, string, number],
      { host: string; name: string; tld: string; ttl: number }
    >;

    NewHost(
      host?: null,
      name?: null,
      tld?: null,
      ttl?: null
    ): TypedEventFilter<
      [string, string, string, number],
      { host: string; name: string; tld: string; ttl: number }
    >;

    "RemoveHost(bytes32,bytes32,bytes32)"(
      host?: null,
      name?: null,
      tld?: null
    ): TypedEventFilter<
      [string, string, string],
      { host: string; name: string; tld: string }
    >;

    RemoveHost(
      host?: null,
      name?: null,
      tld?: null
    ): TypedEventFilter<
      [string, string, string],
      { host: string; name: string; tld: string }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "SetHostOperator(bytes32,bytes32,bytes32,address,bool)"(
      host?: null,
      name?: null,
      tld?: null,
      operator?: null,
      approved?: null
    ): TypedEventFilter<
      [string, string, string, string, boolean],
      {
        host: string;
        name: string;
        tld: string;
        operator: string;
        approved: boolean;
      }
    >;

    SetHostOperator(
      host?: null,
      name?: null,
      tld?: null,
      operator?: null,
      approved?: null
    ): TypedEventFilter<
      [string, string, string, string, boolean],
      {
        host: string;
        name: string;
        tld: string;
        operator: string;
        approved: boolean;
      }
    >;

    "SetHostUser(bytes32,bytes32,bytes32,address,uint64)"(
      host?: null,
      name?: null,
      tld?: null,
      newUser?: null,
      expiry?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        host: string;
        name: string;
        tld: string;
        newUser: string;
        expiry: BigNumber;
      }
    >;

    SetHostUser(
      host?: null,
      name?: null,
      tld?: null,
      newUser?: null,
      expiry?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        host: string;
        name: string;
        tld: string;
        newUser: string;
        expiry: BigNumber;
      }
    >;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    BRIDGE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    REGISTRAR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    WRAPPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    getName(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(
      host: BytesLike,
      name_: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTtl(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUser(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserExpiry(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExists(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLive(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperator(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperator(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      operator_: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRecord(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      ttl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUser(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      newUser: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unsetRecord(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BRIDGE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REGISTRAR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WRAPPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getName(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenId(
      host: BytesLike,
      name_: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTtl(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUser(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserExpiry(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExists(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLive(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperator(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      operator_: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRecord(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      ttl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUser(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      newUser: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unsetRecord(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
