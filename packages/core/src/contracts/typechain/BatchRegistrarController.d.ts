/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BatchRegistrarControllerInterface extends ethers.utils.Interface {
  functions: {
    "register(address,bytes[],bytes[],address[],uint64[],uint256[],bytes[])": FunctionFragment;
    "renew(address,bytes[],bytes[],uint64[],uint256[],bytes[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "register",
    values: [
      string,
      BytesLike[],
      BytesLike[],
      string[],
      BigNumberish[],
      BigNumberish[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renew",
    values: [
      string,
      BytesLike[],
      BytesLike[],
      BigNumberish[],
      BigNumberish[],
      BytesLike[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renew", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export class BatchRegistrarController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BatchRegistrarControllerInterface;

  functions: {
    "register(address,bytes[],bytes[],address[],uint64[],uint256[],bytes[])"(
      controller: string,
      names: BytesLike[],
      tlds: BytesLike[],
      owners: string[],
      expiry: BigNumberish[],
      prices: BigNumberish[],
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "register(address,bytes[],bytes[],address,uint64[])"(
      controller: string,
      names: BytesLike[],
      tlds: BytesLike[],
      owner: string,
      expiry: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renew(address,bytes[],bytes[],uint64[],uint256[],bytes[])"(
      controller: string,
      names: BytesLike[],
      tlds: BytesLike[],
      expiry: BigNumberish[],
      prices: BigNumberish[],
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renew(address,bytes[],bytes[],uint64[])"(
      controller: string,
      names: BytesLike[],
      tlds: BytesLike[],
      expiry: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  "register(address,bytes[],bytes[],address[],uint64[],uint256[],bytes[])"(
    controller: string,
    names: BytesLike[],
    tlds: BytesLike[],
    owners: string[],
    expiry: BigNumberish[],
    prices: BigNumberish[],
    signatures: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "register(address,bytes[],bytes[],address,uint64[])"(
    controller: string,
    names: BytesLike[],
    tlds: BytesLike[],
    owner: string,
    expiry: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renew(address,bytes[],bytes[],uint64[],uint256[],bytes[])"(
    controller: string,
    names: BytesLike[],
    tlds: BytesLike[],
    expiry: BigNumberish[],
    prices: BigNumberish[],
    signatures: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renew(address,bytes[],bytes[],uint64[])"(
    controller: string,
    names: BytesLike[],
    tlds: BytesLike[],
    expiry: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "register(address,bytes[],bytes[],address[],uint64[],uint256[],bytes[])"(
      controller: string,
      names: BytesLike[],
      tlds: BytesLike[],
      owners: string[],
      expiry: BigNumberish[],
      prices: BigNumberish[],
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "register(address,bytes[],bytes[],address,uint64[])"(
      controller: string,
      names: BytesLike[],
      tlds: BytesLike[],
      owner: string,
      expiry: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "renew(address,bytes[],bytes[],uint64[],uint256[],bytes[])"(
      controller: string,
      names: BytesLike[],
      tlds: BytesLike[],
      expiry: BigNumberish[],
      prices: BigNumberish[],
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "renew(address,bytes[],bytes[],uint64[])"(
      controller: string,
      names: BytesLike[],
      tlds: BytesLike[],
      expiry: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;
  };

  estimateGas: {
    "register(address,bytes[],bytes[],address[],uint64[],uint256[],bytes[])"(
      controller: string,
      names: BytesLike[],
      tlds: BytesLike[],
      owners: string[],
      expiry: BigNumberish[],
      prices: BigNumberish[],
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "register(address,bytes[],bytes[],address,uint64[])"(
      controller: string,
      names: BytesLike[],
      tlds: BytesLike[],
      owner: string,
      expiry: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renew(address,bytes[],bytes[],uint64[],uint256[],bytes[])"(
      controller: string,
      names: BytesLike[],
      tlds: BytesLike[],
      expiry: BigNumberish[],
      prices: BigNumberish[],
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renew(address,bytes[],bytes[],uint64[])"(
      controller: string,
      names: BytesLike[],
      tlds: BytesLike[],
      expiry: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "register(address,bytes[],bytes[],address[],uint64[],uint256[],bytes[])"(
      controller: string,
      names: BytesLike[],
      tlds: BytesLike[],
      owners: string[],
      expiry: BigNumberish[],
      prices: BigNumberish[],
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "register(address,bytes[],bytes[],address,uint64[])"(
      controller: string,
      names: BytesLike[],
      tlds: BytesLike[],
      owner: string,
      expiry: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renew(address,bytes[],bytes[],uint64[],uint256[],bytes[])"(
      controller: string,
      names: BytesLike[],
      tlds: BytesLike[],
      expiry: BigNumberish[],
      prices: BigNumberish[],
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renew(address,bytes[],bytes[],uint64[])"(
      controller: string,
      names: BytesLike[],
      tlds: BytesLike[],
      expiry: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
