/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface INFTResolverInterface extends ethers.utils.Interface {
  functions: {
    "getNFT(bytes,bytes,bytes,uint256)": FunctionFragment;
    "setNFT(bytes,bytes,bytes,uint256,address,uint256)": FunctionFragment;
    "unsetNFT(bytes,bytes,bytes,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getNFT",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFT",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetNFT",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unsetNFT", data: BytesLike): Result;

  events: {
    "SetNFT(bytes,bytes,bytes,uint256,address,uint256)": EventFragment;
    "UnsetNFT(bytes,bytes,bytes,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnsetNFT"): EventFragment;
}

export type SetNFTEvent = TypedEvent<
  [string, string, string, BigNumber, string, BigNumber] & {
    host: string;
    name: string;
    tld: string;
    chainId: BigNumber;
    contractAddress: string;
    tokenId: BigNumber;
  }
>;

export type UnsetNFTEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    host: string;
    name: string;
    tld: string;
    chainId: BigNumber;
  }
>;

export class INFTResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: INFTResolverInterface;

  functions: {
    getNFT(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[string, BigNumber] & { contract_: string; tokenId: BigNumber }]
    >;

    setNFT(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      chainId: BigNumberish,
      contract_: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unsetNFT(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      chainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getNFT(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { contract_: string; tokenId: BigNumber }>;

  setNFT(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    chainId: BigNumberish,
    contract_: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unsetNFT(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    chainId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getNFT(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { contract_: string; tokenId: BigNumber }>;

    setNFT(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      chainId: BigNumberish,
      contract_: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unsetNFT(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetNFT(bytes,bytes,bytes,uint256,address,uint256)"(
      host?: null,
      name?: null,
      tld?: null,
      chainId?: null,
      contractAddress?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, BigNumber],
      {
        host: string;
        name: string;
        tld: string;
        chainId: BigNumber;
        contractAddress: string;
        tokenId: BigNumber;
      }
    >;

    SetNFT(
      host?: null,
      name?: null,
      tld?: null,
      chainId?: null,
      contractAddress?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, BigNumber],
      {
        host: string;
        name: string;
        tld: string;
        chainId: BigNumber;
        contractAddress: string;
        tokenId: BigNumber;
      }
    >;

    "UnsetNFT(bytes,bytes,bytes,uint256)"(
      host?: null,
      name?: null,
      tld?: null,
      chainId?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { host: string; name: string; tld: string; chainId: BigNumber }
    >;

    UnsetNFT(
      host?: null,
      name?: null,
      tld?: null,
      chainId?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { host: string; name: string; tld: string; chainId: BigNumber }
    >;
  };

  estimateGas: {
    getNFT(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setNFT(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      chainId: BigNumberish,
      contract_: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unsetNFT(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      chainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getNFT(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setNFT(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      chainId: BigNumberish,
      contract_: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unsetNFT(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      chainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
