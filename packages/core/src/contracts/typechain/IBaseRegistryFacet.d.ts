/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IBaseRegistryFacetInterface extends ethers.utils.Interface {
  functions: {
    "getDefaultWrapper()": FunctionFragment;
    "getGracePeriod()": FunctionFragment;
    "getMortgage()": FunctionFragment;
    "getPublicResolver()": FunctionFragment;
    "getTokenRecord(uint256)": FunctionFragment;
    "setDefaultWrapper(address)": FunctionFragment;
    "setMortgage(address)": FunctionFragment;
    "setPublicResolver(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getDefaultWrapper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMortgage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicResolver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultWrapper",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setMortgage", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPublicResolver",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDefaultWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMortgage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMortgage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicResolver",
    data: BytesLike
  ): Result;

  events: {
    "SetDefaultWrapper(address)": EventFragment;
    "SetMortgage(address)": EventFragment;
    "SetPublicResolver(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetDefaultWrapper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMortgage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPublicResolver"): EventFragment;
}

export type SetDefaultWrapperEvent = TypedEvent<[string] & { wrapper: string }>;

export type SetMortgageEvent = TypedEvent<[string] & { mortgage: string }>;

export type SetPublicResolverEvent = TypedEvent<
  [string] & { resolver: string }
>;

export class IBaseRegistryFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBaseRegistryFacetInterface;

  functions: {
    getDefaultWrapper(overrides?: CallOverrides): Promise<[string]>;

    getGracePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMortgage(overrides?: CallOverrides): Promise<[string]>;

    getPublicResolver(overrides?: CallOverrides): Promise<[string]>;

    getTokenRecord(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, string, string, string] & {
          kind: number;
          tld: string;
          domain: string;
          host: string;
        }
      ]
    >;

    setDefaultWrapper(
      defaultWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMortgage(
      mortgage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicResolver(
      publicResolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getDefaultWrapper(overrides?: CallOverrides): Promise<string>;

  getGracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getMortgage(overrides?: CallOverrides): Promise<string>;

  getPublicResolver(overrides?: CallOverrides): Promise<string>;

  getTokenRecord(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, string] & {
      kind: number;
      tld: string;
      domain: string;
      host: string;
    }
  >;

  setDefaultWrapper(
    defaultWrapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMortgage(
    mortgage: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicResolver(
    publicResolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getDefaultWrapper(overrides?: CallOverrides): Promise<string>;

    getGracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getMortgage(overrides?: CallOverrides): Promise<string>;

    getPublicResolver(overrides?: CallOverrides): Promise<string>;

    getTokenRecord(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, string] & {
        kind: number;
        tld: string;
        domain: string;
        host: string;
      }
    >;

    setDefaultWrapper(
      defaultWrapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMortgage(mortgage: string, overrides?: CallOverrides): Promise<void>;

    setPublicResolver(
      publicResolver: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetDefaultWrapper(address)"(
      wrapper?: null
    ): TypedEventFilter<[string], { wrapper: string }>;

    SetDefaultWrapper(
      wrapper?: null
    ): TypedEventFilter<[string], { wrapper: string }>;

    "SetMortgage(address)"(
      mortgage?: null
    ): TypedEventFilter<[string], { mortgage: string }>;

    SetMortgage(
      mortgage?: null
    ): TypedEventFilter<[string], { mortgage: string }>;

    "SetPublicResolver(address)"(
      resolver?: null
    ): TypedEventFilter<[string], { resolver: string }>;

    SetPublicResolver(
      resolver?: null
    ): TypedEventFilter<[string], { resolver: string }>;
  };

  estimateGas: {
    getDefaultWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    getGracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getMortgage(overrides?: CallOverrides): Promise<BigNumber>;

    getPublicResolver(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenRecord(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDefaultWrapper(
      defaultWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMortgage(
      mortgage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicResolver(
      publicResolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDefaultWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGracePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMortgage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPublicResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenRecord(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDefaultWrapper(
      defaultWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMortgage(
      mortgage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicResolver(
      publicResolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
