/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPortalInterface extends ethers.utils.Interface {
  functions: {
    "estimateFee(uint8,uint8,bytes)": FunctionFragment;
    "getProvider(uint8)": FunctionFragment;
    "receive_(uint8,bytes)": FunctionFragment;
    "send_(address,uint8,uint8,bytes)": FunctionFragment;
    "setProvider(uint8,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "estimateFee",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProvider",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receive_",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "send_",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProvider",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "estimateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "receive_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProvider",
    data: BytesLike
  ): Result;

  events: {
    "PacketReceived(uint8)": EventFragment;
    "PacketSent(address,uint8,uint8)": EventFragment;
    "ProviderError(uint8,string)": EventFragment;
    "ReceiverError(bytes32,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PacketReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PacketSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProviderError"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiverError"): EventFragment;
}

export type PacketReceivedEvent = TypedEvent<[number] & { provider: number }>;

export type PacketSentEvent = TypedEvent<
  [string, number, number] & {
    sender: string;
    dstChain: number;
    provider: number;
  }
>;

export type ProviderErrorEvent = TypedEvent<
  [number, string] & { provider: number; reason: string }
>;

export type ReceiverErrorEvent = TypedEvent<
  [string, string, string] & { id: string; receiver: string; resaon: string }
>;

export class IPortal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPortalInterface;

  functions: {
    estimateFee(
      dstChain: BigNumberish,
      provider: BigNumberish,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProvider(
      provider: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    receive_(
      provider: BigNumberish,
      payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    send_(
      sender: string,
      dstChain: BigNumberish,
      provider: BigNumberish,
      payload: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProvider(
      arg0: BigNumberish,
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  estimateFee(
    dstChain: BigNumberish,
    provider: BigNumberish,
    payload: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProvider(
    provider: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  receive_(
    provider: BigNumberish,
    payload: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  send_(
    sender: string,
    dstChain: BigNumberish,
    provider: BigNumberish,
    payload: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProvider(
    arg0: BigNumberish,
    address_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    estimateFee(
      dstChain: BigNumberish,
      provider: BigNumberish,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProvider(
      provider: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    receive_(
      provider: BigNumberish,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    send_(
      sender: string,
      dstChain: BigNumberish,
      provider: BigNumberish,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setProvider(
      arg0: BigNumberish,
      address_: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PacketReceived(uint8)"(
      provider?: null
    ): TypedEventFilter<[number], { provider: number }>;

    PacketReceived(
      provider?: null
    ): TypedEventFilter<[number], { provider: number }>;

    "PacketSent(address,uint8,uint8)"(
      sender?: string | null,
      dstChain?: null,
      provider?: null
    ): TypedEventFilter<
      [string, number, number],
      { sender: string; dstChain: number; provider: number }
    >;

    PacketSent(
      sender?: string | null,
      dstChain?: null,
      provider?: null
    ): TypedEventFilter<
      [string, number, number],
      { sender: string; dstChain: number; provider: number }
    >;

    "ProviderError(uint8,string)"(
      provider?: null,
      reason?: null
    ): TypedEventFilter<[number, string], { provider: number; reason: string }>;

    ProviderError(
      provider?: null,
      reason?: null
    ): TypedEventFilter<[number, string], { provider: number; reason: string }>;

    "ReceiverError(bytes32,address,string)"(
      id?: null,
      receiver?: string | null,
      resaon?: null
    ): TypedEventFilter<
      [string, string, string],
      { id: string; receiver: string; resaon: string }
    >;

    ReceiverError(
      id?: null,
      receiver?: string | null,
      resaon?: null
    ): TypedEventFilter<
      [string, string, string],
      { id: string; receiver: string; resaon: string }
    >;
  };

  estimateGas: {
    estimateFee(
      dstChain: BigNumberish,
      provider: BigNumberish,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProvider(
      provider: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receive_(
      provider: BigNumberish,
      payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    send_(
      sender: string,
      dstChain: BigNumberish,
      provider: BigNumberish,
      payload: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProvider(
      arg0: BigNumberish,
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    estimateFee(
      dstChain: BigNumberish,
      provider: BigNumberish,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProvider(
      provider: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receive_(
      provider: BigNumberish,
      payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    send_(
      sender: string,
      dstChain: BigNumberish,
      provider: BigNumberish,
      payload: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProvider(
      arg0: BigNumberish,
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
