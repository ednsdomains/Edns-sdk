/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ILayerZeroProviderInterface extends ethers.utils.Interface {
  functions: {
    "estimateFee(uint8,bytes)": FunctionFragment;
    "forceResume(uint16,bytes)": FunctionFragment;
    "getChainId(uint8)": FunctionFragment;
    "getEndpoint()": FunctionFragment;
    "isTrustedRemote(uint16,bytes)": FunctionFragment;
    "lzReceive(uint16,bytes,uint64,bytes)": FunctionFragment;
    "receive_(bytes)": FunctionFragment;
    "send_(address,uint8,bytes)": FunctionFragment;
    "setChainId(uint8,uint16)": FunctionFragment;
    "setEndpoint(address)": FunctionFragment;
    "setTrustedRemote(uint16,bytes)": FunctionFragment;
    "setV1AdaptorParameters(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "estimateFee",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forceResume",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedRemote",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "receive_", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "send_",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setEndpoint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTrustedRemote",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setV1AdaptorParameters",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "estimateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceResume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receive_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setV1AdaptorParameters",
    data: BytesLike
  ): Result;

  events: {
    "MessageDeliverFailed(bytes32,string)": EventFragment;
    "MessageDelivered(bytes32)": EventFragment;
    "MessageReceived(uint16,bytes,bytes32,bytes,uint64)": EventFragment;
    "MessageSent(address,uint16,bytes,uint64)": EventFragment;
    "SetTrustedRemote(uint16,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageDeliverFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageDelivered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTrustedRemote"): EventFragment;
}

export type MessageDeliverFailedEvent = TypedEvent<
  [string, string] & { ref: string; reason: string }
>;

export type MessageDeliveredEvent = TypedEvent<[string] & { ref: string }>;

export type MessageReceivedEvent = TypedEvent<
  [number, string, string, string, BigNumber] & {
    srcChainId: number;
    srcAddress: string;
    ref: string;
    payload: string;
    nonce: BigNumber;
  }
>;

export type MessageSentEvent = TypedEvent<
  [string, number, string, BigNumber] & {
    sender: string;
    dstChainId: number;
    payload: string;
    nonce: BigNumber;
  }
>;

export type SetTrustedRemoteEvent = TypedEvent<
  [number, string] & { srcChainId: number; srcAddress: string }
>;

export class ILayerZeroProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ILayerZeroProviderInterface;

  functions: {
    estimateFee(
      _dstChain: BigNumberish,
      _payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    forceResume(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainId(
      chain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEndpoint(overrides?: CallOverrides): Promise<[string]>;

    isTrustedRemote(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lzReceive(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    receive_(
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    send_(
      _from: string,
      _dstChain: BigNumberish,
      _payload: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChainId(
      chain: BigNumberish,
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEndpoint(
      lzEndpoint_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTrustedRemote(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setV1AdaptorParameters(
      dstGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  estimateFee(
    _dstChain: BigNumberish,
    _payload: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  forceResume(
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainId(
    chain: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEndpoint(overrides?: CallOverrides): Promise<string>;

  isTrustedRemote(
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lzReceive(
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    _nonce: BigNumberish,
    _payload: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  receive_(
    _payload: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  send_(
    _from: string,
    _dstChain: BigNumberish,
    _payload: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChainId(
    chain: BigNumberish,
    chainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEndpoint(
    lzEndpoint_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTrustedRemote(
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setV1AdaptorParameters(
    dstGasLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    estimateFee(
      _dstChain: BigNumberish,
      _payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceResume(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getChainId(chain: BigNumberish, overrides?: CallOverrides): Promise<number>;

    getEndpoint(overrides?: CallOverrides): Promise<string>;

    isTrustedRemote(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lzReceive(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    receive_(_payload: BytesLike, overrides?: CallOverrides): Promise<void>;

    send_(
      _from: string,
      _dstChain: BigNumberish,
      _payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainId(
      chain: BigNumberish,
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEndpoint(lzEndpoint_: string, overrides?: CallOverrides): Promise<void>;

    setTrustedRemote(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setV1AdaptorParameters(
      dstGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MessageDeliverFailed(bytes32,string)"(
      ref?: null,
      reason?: null
    ): TypedEventFilter<[string, string], { ref: string; reason: string }>;

    MessageDeliverFailed(
      ref?: null,
      reason?: null
    ): TypedEventFilter<[string, string], { ref: string; reason: string }>;

    "MessageDelivered(bytes32)"(
      ref?: null
    ): TypedEventFilter<[string], { ref: string }>;

    MessageDelivered(ref?: null): TypedEventFilter<[string], { ref: string }>;

    "MessageReceived(uint16,bytes,bytes32,bytes,uint64)"(
      srcChainId?: BigNumberish | null,
      srcAddress?: BytesLike | null,
      ref?: null,
      payload?: BytesLike | null,
      nonce?: null
    ): TypedEventFilter<
      [number, string, string, string, BigNumber],
      {
        srcChainId: number;
        srcAddress: string;
        ref: string;
        payload: string;
        nonce: BigNumber;
      }
    >;

    MessageReceived(
      srcChainId?: BigNumberish | null,
      srcAddress?: BytesLike | null,
      ref?: null,
      payload?: BytesLike | null,
      nonce?: null
    ): TypedEventFilter<
      [number, string, string, string, BigNumber],
      {
        srcChainId: number;
        srcAddress: string;
        ref: string;
        payload: string;
        nonce: BigNumber;
      }
    >;

    "MessageSent(address,uint16,bytes,uint64)"(
      sender?: string | null,
      dstChainId?: BigNumberish | null,
      payload?: BytesLike | null,
      nonce?: null
    ): TypedEventFilter<
      [string, number, string, BigNumber],
      { sender: string; dstChainId: number; payload: string; nonce: BigNumber }
    >;

    MessageSent(
      sender?: string | null,
      dstChainId?: BigNumberish | null,
      payload?: BytesLike | null,
      nonce?: null
    ): TypedEventFilter<
      [string, number, string, BigNumber],
      { sender: string; dstChainId: number; payload: string; nonce: BigNumber }
    >;

    "SetTrustedRemote(uint16,bytes)"(
      srcChainId?: null,
      srcAddress?: null
    ): TypedEventFilter<
      [number, string],
      { srcChainId: number; srcAddress: string }
    >;

    SetTrustedRemote(
      srcChainId?: null,
      srcAddress?: null
    ): TypedEventFilter<
      [number, string],
      { srcChainId: number; srcAddress: string }
    >;
  };

  estimateGas: {
    estimateFee(
      _dstChain: BigNumberish,
      _payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceResume(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainId(
      chain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEndpoint(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedRemote(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lzReceive(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    receive_(
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    send_(
      _from: string,
      _dstChain: BigNumberish,
      _payload: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChainId(
      chain: BigNumberish,
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEndpoint(
      lzEndpoint_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTrustedRemote(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setV1AdaptorParameters(
      dstGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    estimateFee(
      _dstChain: BigNumberish,
      _payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceResume(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainId(
      chain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEndpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTrustedRemote(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lzReceive(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    receive_(
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    send_(
      _from: string,
      _dstChain: BigNumberish,
      _payload: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChainId(
      chain: BigNumberish,
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEndpoint(
      lzEndpoint_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedRemote(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setV1AdaptorParameters(
      dstGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
