/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISynchronizerInterface extends ethers.utils.Interface {
  functions: {
    "estimateSyncFee(uint8,uint8,uint8[],bytes)": FunctionFragment;
    "getRemoteSynchronizer(uint8)": FunctionFragment;
    "getUserDefaultProvider(address)": FunctionFragment;
    "setRemoteSynchronizer(uint8,address)": FunctionFragment;
    "setUserDefaultProvider(address,uint8)": FunctionFragment;
    "sync(address,uint8,uint8,uint8[],bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "estimateSyncFee",
    values: [BigNumberish, BigNumberish, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemoteSynchronizer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDefaultProvider",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRemoteSynchronizer",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserDefaultProvider",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sync",
    values: [string, BigNumberish, BigNumberish, BigNumberish[], BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "estimateSyncFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemoteSynchronizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDefaultProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRemoteSynchronizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserDefaultProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;

  events: {
    "ApplicationError(uint8,string)": EventFragment;
    "IncomingSync(uint8,address)": EventFragment;
    "OutgoingSync(uint8,uint8,uint8[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApplicationError"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncomingSync"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutgoingSync"): EventFragment;
}

export type ApplicationErrorEvent = TypedEvent<
  [number, string] & { action: number; reason: string }
>;

export type IncomingSyncEvent = TypedEvent<
  [number, string] & { action: number; target: string }
>;

export type OutgoingSyncEvent = TypedEvent<
  [number, number, number[]] & {
    action: number;
    provider: number;
    dstChains: number[];
  }
>;

export class ISynchronizer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISynchronizerInterface;

  functions: {
    estimateSyncFee(
      action: BigNumberish,
      provider: BigNumberish,
      dstChains: BigNumberish[],
      ews: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRemoteSynchronizer(
      chain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserDefaultProvider(
      user: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    setRemoteSynchronizer(
      chain: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUserDefaultProvider(
      user: string,
      provider: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sync(
      sender: string,
      action: BigNumberish,
      provider: BigNumberish,
      dstChains: BigNumberish[],
      ews: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  estimateSyncFee(
    action: BigNumberish,
    provider: BigNumberish,
    dstChains: BigNumberish[],
    ews: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRemoteSynchronizer(
    chain: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserDefaultProvider(
    user: string,
    overrides?: CallOverrides
  ): Promise<number>;

  setRemoteSynchronizer(
    chain: BigNumberish,
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUserDefaultProvider(
    user: string,
    provider: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sync(
    sender: string,
    action: BigNumberish,
    provider: BigNumberish,
    dstChains: BigNumberish[],
    ews: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    estimateSyncFee(
      action: BigNumberish,
      provider: BigNumberish,
      dstChains: BigNumberish[],
      ews: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemoteSynchronizer(
      chain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserDefaultProvider(
      user: string,
      overrides?: CallOverrides
    ): Promise<number>;

    setRemoteSynchronizer(
      chain: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserDefaultProvider(
      user: string,
      provider: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sync(
      sender: string,
      action: BigNumberish,
      provider: BigNumberish,
      dstChains: BigNumberish[],
      ews: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApplicationError(uint8,string)"(
      action?: null,
      reason?: null
    ): TypedEventFilter<[number, string], { action: number; reason: string }>;

    ApplicationError(
      action?: null,
      reason?: null
    ): TypedEventFilter<[number, string], { action: number; reason: string }>;

    "IncomingSync(uint8,address)"(
      action?: null,
      target?: null
    ): TypedEventFilter<[number, string], { action: number; target: string }>;

    IncomingSync(
      action?: null,
      target?: null
    ): TypedEventFilter<[number, string], { action: number; target: string }>;

    "OutgoingSync(uint8,uint8,uint8[])"(
      action?: null,
      provider?: null,
      dstChains?: null
    ): TypedEventFilter<
      [number, number, number[]],
      { action: number; provider: number; dstChains: number[] }
    >;

    OutgoingSync(
      action?: null,
      provider?: null,
      dstChains?: null
    ): TypedEventFilter<
      [number, number, number[]],
      { action: number; provider: number; dstChains: number[] }
    >;
  };

  estimateGas: {
    estimateSyncFee(
      action: BigNumberish,
      provider: BigNumberish,
      dstChains: BigNumberish[],
      ews: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemoteSynchronizer(
      chain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserDefaultProvider(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRemoteSynchronizer(
      chain: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUserDefaultProvider(
      user: string,
      provider: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sync(
      sender: string,
      action: BigNumberish,
      provider: BigNumberish,
      dstChains: BigNumberish[],
      ews: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    estimateSyncFee(
      action: BigNumberish,
      provider: BigNumberish,
      dstChains: BigNumberish[],
      ews: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemoteSynchronizer(
      chain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserDefaultProvider(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRemoteSynchronizer(
      chain: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUserDefaultProvider(
      user: string,
      provider: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sync(
      sender: string,
      action: BigNumberish,
      provider: BigNumberish,
      dstChains: BigNumberish[],
      ews: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
