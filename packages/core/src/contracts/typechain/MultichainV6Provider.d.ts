/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MultichainV6ProviderInterface extends ethers.utils.Interface {
  functions: {
    "estimateFees(uint16,bytes)": FunctionFragment;
    "send_(address,uint16,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "estimateFees",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "send_",
    values: [string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "estimateFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send_", data: BytesLike): Result;

  events: {
    "Received(uint16,bytes,bytes)": EventFragment;
    "Sent(address,uint16,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sent"): EventFragment;
}

export type ReceivedEvent = TypedEvent<
  [number, string, string] & {
    srcChainId: number;
    srcAddress: string;
    payload: string;
  }
>;

export type SentEvent = TypedEvent<
  [string, number, string] & {
    sender: string;
    dstChainId: number;
    payload: string;
  }
>;

export class MultichainV6Provider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MultichainV6ProviderInterface;

  functions: {
    estimateFees(
      _dstChainId: BigNumberish,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    send_(
      _from: string,
      _dstChainId: BigNumberish,
      payload: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  estimateFees(
    _dstChainId: BigNumberish,
    payload: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  send_(
    _from: string,
    _dstChainId: BigNumberish,
    payload: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    estimateFees(
      _dstChainId: BigNumberish,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    send_(
      _from: string,
      _dstChainId: BigNumberish,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Received(uint16,bytes,bytes)"(
      srcChainId?: BigNumberish | null,
      srcAddress?: BytesLike | null,
      payload?: BytesLike | null
    ): TypedEventFilter<
      [number, string, string],
      { srcChainId: number; srcAddress: string; payload: string }
    >;

    Received(
      srcChainId?: BigNumberish | null,
      srcAddress?: BytesLike | null,
      payload?: BytesLike | null
    ): TypedEventFilter<
      [number, string, string],
      { srcChainId: number; srcAddress: string; payload: string }
    >;

    "Sent(address,uint16,bytes)"(
      sender?: string | null,
      dstChainId?: BigNumberish | null,
      payload?: BytesLike | null
    ): TypedEventFilter<
      [string, number, string],
      { sender: string; dstChainId: number; payload: string }
    >;

    Sent(
      sender?: string | null,
      dstChainId?: BigNumberish | null,
      payload?: BytesLike | null
    ): TypedEventFilter<
      [string, number, string],
      { sender: string; dstChainId: number; payload: string }
    >;
  };

  estimateGas: {
    estimateFees(
      _dstChainId: BigNumberish,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    send_(
      _from: string,
      _dstChainId: BigNumberish,
      payload: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    estimateFees(
      _dstChainId: BigNumberish,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    send_(
      _from: string,
      _dstChainId: BigNumberish,
      payload: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
