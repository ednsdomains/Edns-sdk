/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRentalInterface extends ethers.utils.Interface {
  functions: {
    "list(address,uint256,uint64,uint256)": FunctionFragment;
    "rent(address,uint256,address)": FunctionFragment;
    "unlist(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "list",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rent",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlist",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlist", data: BytesLike): Result;

  events: {
    "Listed(uint256,uint64,uint256)": EventFragment;
    "Rented(uint256,address)": EventFragment;
    "Unlisted(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Listed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rented"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlisted"): EventFragment;
}

export type ListedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    tokenId: BigNumber;
    expiry: BigNumber;
    amount: BigNumber;
  }
>;

export type RentedEvent = TypedEvent<
  [BigNumber, string] & { tokenId: BigNumber; newUser: string }
>;

export type UnlistedEvent = TypedEvent<[BigNumber] & { tokenId: BigNumber }>;

export class IRental extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRentalInterface;

  functions: {
    list(
      wrapper: string,
      tokenId: BigNumberish,
      expiry: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rent(
      wrapper: string,
      tokenId: BigNumberish,
      newUser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlist(
      wrapper: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  list(
    wrapper: string,
    tokenId: BigNumberish,
    expiry: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rent(
    wrapper: string,
    tokenId: BigNumberish,
    newUser: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlist(
    wrapper: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    list(
      wrapper: string,
      tokenId: BigNumberish,
      expiry: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rent(
      wrapper: string,
      tokenId: BigNumberish,
      newUser: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlist(
      wrapper: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Listed(uint256,uint64,uint256)"(
      tokenId?: BigNumberish | null,
      expiry?: BigNumberish | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { tokenId: BigNumber; expiry: BigNumber; amount: BigNumber }
    >;

    Listed(
      tokenId?: BigNumberish | null,
      expiry?: BigNumberish | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { tokenId: BigNumber; expiry: BigNumber; amount: BigNumber }
    >;

    "Rented(uint256,address)"(
      tokenId?: null,
      newUser?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; newUser: string }
    >;

    Rented(
      tokenId?: null,
      newUser?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; newUser: string }
    >;

    "Unlisted(uint256)"(
      tokenId?: null
    ): TypedEventFilter<[BigNumber], { tokenId: BigNumber }>;

    Unlisted(
      tokenId?: null
    ): TypedEventFilter<[BigNumber], { tokenId: BigNumber }>;
  };

  estimateGas: {
    list(
      wrapper: string,
      tokenId: BigNumberish,
      expiry: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rent(
      wrapper: string,
      tokenId: BigNumberish,
      newUser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlist(
      wrapper: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    list(
      wrapper: string,
      tokenId: BigNumberish,
      expiry: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rent(
      wrapper: string,
      tokenId: BigNumberish,
      newUser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlist(
      wrapper: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
