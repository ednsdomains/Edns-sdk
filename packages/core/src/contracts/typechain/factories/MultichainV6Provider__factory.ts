/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultichainV6Provider,
  MultichainV6ProviderInterface,
} from "../MultichainV6Provider";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint16",
        name: "srcChainId",
        type: "uint16",
      },
      {
        indexed: true,
        internalType: "bytes",
        name: "srcAddress",
        type: "bytes",
      },
      {
        indexed: true,
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "Received",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint16",
        name: "dstChainId",
        type: "uint16",
      },
      {
        indexed: true,
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "Sent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_dstChainId",
        type: "uint16",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "estimateFees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_from",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_dstChainId",
        type: "uint16",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "send_",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610222806100206000396000f3fe6080604052600436106100295760003560e01c80635a2c0b731461002e5780639753df2c14610043575b600080fd5b61004161003c366004610132565b505050565b005b34801561004f57600080fd5b5061006661005e36600461019e565b600092915050565b60405190815260200160405180910390f35b803561ffff8116811461008a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126100b657600080fd5b813567ffffffffffffffff808211156100d1576100d161008f565b604051601f8301601f19908116603f011681019082821181831017156100f9576100f961008f565b8160405283815286602085880101111561011257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561014757600080fd5b83356001600160a01b038116811461015e57600080fd5b925061016c60208501610078565b9150604084013567ffffffffffffffff81111561018857600080fd5b610194868287016100a5565b9150509250925092565b600080604083850312156101b157600080fd5b6101ba83610078565b9150602083013567ffffffffffffffff8111156101d657600080fd5b6101e2858286016100a5565b915050925092905056fea2646970667358221220a188ccb780fc0abe39f4737d3e0368ece33135477370167e8eab731cbcdc21da64736f6c63430008110033";

export class MultichainV6Provider__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultichainV6Provider> {
    return super.deploy(overrides || {}) as Promise<MultichainV6Provider>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MultichainV6Provider {
    return super.attach(address) as MultichainV6Provider;
  }
  connect(signer: Signer): MultichainV6Provider__factory {
    return super.connect(signer) as MultichainV6Provider__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultichainV6ProviderInterface {
    return new utils.Interface(_abi) as MultichainV6ProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultichainV6Provider {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MultichainV6Provider;
  }
}
