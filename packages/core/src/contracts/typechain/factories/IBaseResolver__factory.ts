/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IBaseResolver, IBaseResolverInterface } from "../IBaseResolver";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "ews",
        type: "bytes",
      },
    ],
    name: "IncomingSync",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "ews",
        type: "bytes",
      },
    ],
    name: "OutgoingSync",
    type: "event",
  },
  {
    inputs: [],
    name: "getSynchronizerProvider",
    outputs: [
      {
        internalType: "enum CrossChainProvider.CrossChainProvider",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "ews",
        type: "bytes",
      },
    ],
    name: "receiveSync",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISynchronizer",
        name: "synchronizer_",
        type: "address",
      },
    ],
    name: "setSynchronizer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum CrossChainProvider.CrossChainProvider",
        name: "provider",
        type: "uint8",
      },
    ],
    name: "setSynchronizerProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IBaseResolver__factory {
  static readonly abi = _abi;
  static createInterface(): IBaseResolverInterface {
    return new utils.Interface(_abi) as IBaseResolverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBaseResolver {
    return new Contract(address, _abi, signerOrProvider) as IBaseResolver;
  }
}
