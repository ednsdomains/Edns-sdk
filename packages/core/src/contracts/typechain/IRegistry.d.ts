/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRegistryInterface extends ethers.utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "BRIDGE_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "REGISTRAR_ROLE()": FunctionFragment;
    "ROOT_ROLE()": FunctionFragment;
    "WRAPPER_ROLE()": FunctionFragment;
    "bridge(bytes32,bytes32)": FunctionFragment;
    "getChains(bytes32)": FunctionFragment;
    "getClass(bytes32)": FunctionFragment;
    "getDefaultWrapper()": FunctionFragment;
    "getExpiry(bytes32)": FunctionFragment;
    "getGracePeriod()": FunctionFragment;
    "getMortgage()": FunctionFragment;
    "getName(bytes32)": FunctionFragment;
    "getOwner(bytes32,bytes32)": FunctionFragment;
    "getPublicResolver()": FunctionFragment;
    "getResolver(bytes32,bytes32)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTokenId(bytes)": FunctionFragment;
    "getTokenRecord(uint256)": FunctionFragment;
    "getTtl(bytes32,bytes32,bytes32)": FunctionFragment;
    "getUser(bytes32,bytes32,bytes32)": FunctionFragment;
    "getUserExpiry(bytes32,bytes32)": FunctionFragment;
    "getWrapper(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isEnable(bytes32)": FunctionFragment;
    "isExists(bytes32,bytes32)": FunctionFragment;
    "isLive(bytes32,bytes32)": FunctionFragment;
    "isOperator(bytes32,bytes32,bytes32,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setDefaultWrapper(address)": FunctionFragment;
    "setEnable(bytes32,bool)": FunctionFragment;
    "setExpiry(bytes32,bytes32,uint64)": FunctionFragment;
    "setMortgage(address)": FunctionFragment;
    "setOperator(bytes32,bytes32,address,bool)": FunctionFragment;
    "setOwner(bytes32,bytes32,address)": FunctionFragment;
    "setPublicResolver(address)": FunctionFragment;
    "setRecord(bytes,bytes,bytes,uint16)": FunctionFragment;
    "setResolver(bytes32,address)": FunctionFragment;
    "setUser(bytes32,bytes32,address,uint64)": FunctionFragment;
    "setWrapper(bytes32,bool,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unsetRecord(bytes32,bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BRIDGE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRAR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROOT_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WRAPPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridge",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChains",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getClass", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getDefaultWrapper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExpiry",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMortgage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getOwner",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicResolver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getResolver",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTtl",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserExpiry",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWrapper",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "isEnable", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isExists",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLive",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [BytesLike, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultWrapper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnable",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpiry",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setMortgage", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [BytesLike, BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicResolver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecord",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolver",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUser",
    values: [BytesLike, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrapper",
    values: [BytesLike, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetRecord",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BRIDGE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRAR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROOT_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WRAPPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getChains", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getClass", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getExpiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMortgage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPublicResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTtl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWrapper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEnable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEnable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setExpiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMortgage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPublicResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWrapper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetRecord",
    data: BytesLike
  ): Result;

  events: {
    "DomainBridged(bytes32,bytes32,uint8)": EventFragment;
    "NewDomain(bytes,bytes,address,uint64)": EventFragment;
    "NewHost(bytes,bytes,bytes,uint16)": EventFragment;
    "NewTld(uint8,bytes,address)": EventFragment;
    "RemoveDomain(bytes32,bytes32)": EventFragment;
    "RemoveHost(bytes32,bytes32,bytes32)": EventFragment;
    "RemoveTld(bytes32)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetDefaultWrapper(address)": EventFragment;
    "SetDomainExpiry(bytes32,bytes32,uint64)": EventFragment;
    "SetDomainOperator(bytes32,bytes32,address,bool)": EventFragment;
    "SetDomainOwner(bytes32,bytes32,address)": EventFragment;
    "SetDomainResolver(bytes32,bytes32,address)": EventFragment;
    "SetDomainUser(bytes32,bytes32,address,uint64)": EventFragment;
    "SetHostOperator(bytes32,bytes32,bytes32,address,bool)": EventFragment;
    "SetHostUser(bytes32,bytes32,bytes32,address,uint64)": EventFragment;
    "SetMortgage(address)": EventFragment;
    "SetPublicResolver(address)": EventFragment;
    "SetTldEnable(bytes32,bool)": EventFragment;
    "SetTldExpiry(bytes32,uint64)": EventFragment;
    "SetTldOwner(bytes32,address)": EventFragment;
    "SetTldResolver(bytes32,address)": EventFragment;
    "SetTldWrapper(bytes32,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DomainBridged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDomain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewHost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTld"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveDomain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveHost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveTld"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDefaultWrapper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDomainExpiry"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDomainOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDomainOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDomainResolver"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDomainUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHostOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHostUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMortgage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPublicResolver"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTldEnable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTldExpiry"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTldOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTldResolver"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTldWrapper"): EventFragment;
}

export type DomainBridgedEvent = TypedEvent<
  [string, string, number] & { name: string; tld: string; dstChain: number }
>;

export type NewDomainEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    name: string;
    tld: string;
    owner: string;
    expiry: BigNumber;
  }
>;

export type NewHostEvent = TypedEvent<
  [string, string, string, number] & {
    host: string;
    name: string;
    tld: string;
    ttl: number;
  }
>;

export type NewTldEvent = TypedEvent<
  [number, string, string] & { class_: number; tld: string; owner: string }
>;

export type RemoveDomainEvent = TypedEvent<
  [string, string] & { name: string; tld: string }
>;

export type RemoveHostEvent = TypedEvent<
  [string, string, string] & { host: string; name: string; tld: string }
>;

export type RemoveTldEvent = TypedEvent<[string] & { tld: string }>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type SetDefaultWrapperEvent = TypedEvent<[string] & { wrapper: string }>;

export type SetDomainExpiryEvent = TypedEvent<
  [string, string, BigNumber] & { name: string; tld: string; expiry: BigNumber }
>;

export type SetDomainOperatorEvent = TypedEvent<
  [string, string, string, boolean] & {
    name: string;
    tld: string;
    operator: string;
    approved: boolean;
  }
>;

export type SetDomainOwnerEvent = TypedEvent<
  [string, string, string] & { name: string; tld: string; owner: string }
>;

export type SetDomainResolverEvent = TypedEvent<
  [string, string, string] & { name: string; tld: string; newResolver: string }
>;

export type SetDomainUserEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    name: string;
    tld: string;
    newUser: string;
    expiry: BigNumber;
  }
>;

export type SetHostOperatorEvent = TypedEvent<
  [string, string, string, string, boolean] & {
    host: string;
    name: string;
    tld: string;
    operator: string;
    approved: boolean;
  }
>;

export type SetHostUserEvent = TypedEvent<
  [string, string, string, string, BigNumber] & {
    host: string;
    name: string;
    tld: string;
    newUser: string;
    expiry: BigNumber;
  }
>;

export type SetMortgageEvent = TypedEvent<[string] & { mortgage: string }>;

export type SetPublicResolverEvent = TypedEvent<
  [string] & { resolver: string }
>;

export type SetTldEnableEvent = TypedEvent<
  [string, boolean] & { tld: string; enable: boolean }
>;

export type SetTldExpiryEvent = TypedEvent<
  [string, BigNumber] & { tld: string; expiry: BigNumber }
>;

export type SetTldOwnerEvent = TypedEvent<
  [string, string] & { tld: string; owner: string }
>;

export type SetTldResolverEvent = TypedEvent<
  [string, string] & { tld: string; resolver: string }
>;

export type SetTldWrapperEvent = TypedEvent<
  [string, string, boolean] & { tld: string; wrapper: string; enable: boolean }
>;

export class IRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRegistryInterface;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    BRIDGE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    REGISTRAR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ROOT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    WRAPPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    bridge(
      name: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChains(tld: BytesLike, overrides?: CallOverrides): Promise<[number[]]>;

    getClass(tld: BytesLike, overrides?: CallOverrides): Promise<[number]>;

    getDefaultWrapper(overrides?: CallOverrides): Promise<[string]>;

    "getExpiry(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getExpiry(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGracePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMortgage(overrides?: CallOverrides): Promise<[string]>;

    "getName(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getName(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getName(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getOwner(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getOwner(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPublicResolver(overrides?: CallOverrides): Promise<[string]>;

    "getResolver(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getResolver(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getTokenId(bytes)"(
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getTokenId(bytes,bytes,bytes)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getTokenId(bytes,bytes)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokenRecord(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, string, string, string] & {
          kind: number;
          tld: string;
          domain: string;
          host: string;
        }
      ]
    >;

    getTtl(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getUser(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getUser(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getUserExpiry(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getUserExpiry(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWrapper(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[[boolean, string] & { enable: boolean; address_: string }]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isEnable(tld: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "isExists(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isExists(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isExists(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isLive(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isLive(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOperator(bytes32,bytes32,bytes32,address)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isOperator(bytes32,bytes32,address)"(
      name: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultWrapper(
      defaultWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnable(
      tld: BytesLike,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setExpiry(bytes32,bytes32,uint64)"(
      name: BytesLike,
      tld: BytesLike,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setExpiry(bytes32,uint64)"(
      tld: BytesLike,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMortgage(
      mortgage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOperator(bytes32,bytes32,address,bool)"(
      name: BytesLike,
      tld: BytesLike,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOperator(bytes32,bytes32,bytes32,address,bool)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOwner(bytes32,bytes32,address)"(
      name: BytesLike,
      tld: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOwner(bytes32,address)"(
      tld: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicResolver(
      publicResolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRecord(bytes,bytes,bytes,uint16)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      ttl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRecord(bytes,bytes,address,address,uint64)"(
      name: BytesLike,
      tld: BytesLike,
      owner: string,
      resolver: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRecord(uint8[],bytes,address,address,uint64,bool,uint8)"(
      chains: BigNumberish[],
      tld: BytesLike,
      owner: string,
      resolver: string,
      expiry: BigNumberish,
      enable: boolean,
      class_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setResolver(bytes32,address)"(
      tld: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setResolver(bytes32,bytes32,address)"(
      name: BytesLike,
      tld: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setUser(bytes32,bytes32,address,uint64)"(
      name: BytesLike,
      tld: BytesLike,
      user: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setUser(bytes32,bytes32,bytes32,address,uint64)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      user: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWrapper(
      tld: BytesLike,
      enable_: boolean,
      wrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unsetRecord(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  BRIDGE_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  REGISTRAR_ROLE(overrides?: CallOverrides): Promise<string>;

  ROOT_ROLE(overrides?: CallOverrides): Promise<string>;

  WRAPPER_ROLE(overrides?: CallOverrides): Promise<string>;

  bridge(
    name: BytesLike,
    tld: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChains(tld: BytesLike, overrides?: CallOverrides): Promise<number[]>;

  getClass(tld: BytesLike, overrides?: CallOverrides): Promise<number>;

  getDefaultWrapper(overrides?: CallOverrides): Promise<string>;

  "getExpiry(bytes32)"(
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getExpiry(bytes32,bytes32)"(
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getMortgage(overrides?: CallOverrides): Promise<string>;

  "getName(bytes32)"(
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getName(bytes32,bytes32)"(
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getName(bytes32,bytes32,bytes32)"(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getOwner(bytes32,bytes32)"(
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getOwner(bytes32)"(
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getPublicResolver(overrides?: CallOverrides): Promise<string>;

  "getResolver(bytes32,bytes32)"(
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getResolver(bytes32)"(
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getTokenId(bytes)"(
    tld: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getTokenId(bytes,bytes,bytes)"(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getTokenId(bytes,bytes)"(
    name: BytesLike,
    tld: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokenRecord(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, string] & {
      kind: number;
      tld: string;
      domain: string;
      host: string;
    }
  >;

  getTtl(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  "getUser(bytes32,bytes32,bytes32)"(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getUser(bytes32,bytes32)"(
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getUserExpiry(bytes32,bytes32)"(
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserExpiry(bytes32,bytes32,bytes32)"(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWrapper(
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { enable: boolean; address_: string }>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isEnable(tld: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "isExists(bytes32,bytes32)"(
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isExists(bytes32)"(
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isExists(bytes32,bytes32,bytes32)"(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isLive(bytes32,bytes32)"(
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isLive(bytes32,bytes32,bytes32)"(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOperator(bytes32,bytes32,bytes32,address)"(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOperator(bytes32,bytes32,address)"(
    name: BytesLike,
    tld: BytesLike,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultWrapper(
    defaultWrapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnable(
    tld: BytesLike,
    enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setExpiry(bytes32,bytes32,uint64)"(
    name: BytesLike,
    tld: BytesLike,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setExpiry(bytes32,uint64)"(
    tld: BytesLike,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMortgage(
    mortgage: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOperator(bytes32,bytes32,address,bool)"(
    name: BytesLike,
    tld: BytesLike,
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOperator(bytes32,bytes32,bytes32,address,bool)"(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOwner(bytes32,bytes32,address)"(
    name: BytesLike,
    tld: BytesLike,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOwner(bytes32,address)"(
    tld: BytesLike,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicResolver(
    publicResolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRecord(bytes,bytes,bytes,uint16)"(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    ttl: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRecord(bytes,bytes,address,address,uint64)"(
    name: BytesLike,
    tld: BytesLike,
    owner: string,
    resolver: string,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRecord(uint8[],bytes,address,address,uint64,bool,uint8)"(
    chains: BigNumberish[],
    tld: BytesLike,
    owner: string,
    resolver: string,
    expiry: BigNumberish,
    enable: boolean,
    class_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setResolver(bytes32,address)"(
    tld: BytesLike,
    resolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setResolver(bytes32,bytes32,address)"(
    name: BytesLike,
    tld: BytesLike,
    resolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setUser(bytes32,bytes32,address,uint64)"(
    name: BytesLike,
    tld: BytesLike,
    user: string,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setUser(bytes32,bytes32,bytes32,address,uint64)"(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    user: string,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWrapper(
    tld: BytesLike,
    enable_: boolean,
    wrapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unsetRecord(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    BRIDGE_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    REGISTRAR_ROLE(overrides?: CallOverrides): Promise<string>;

    ROOT_ROLE(overrides?: CallOverrides): Promise<string>;

    WRAPPER_ROLE(overrides?: CallOverrides): Promise<string>;

    bridge(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getChains(tld: BytesLike, overrides?: CallOverrides): Promise<number[]>;

    getClass(tld: BytesLike, overrides?: CallOverrides): Promise<number>;

    getDefaultWrapper(overrides?: CallOverrides): Promise<string>;

    "getExpiry(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExpiry(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getMortgage(overrides?: CallOverrides): Promise<string>;

    "getName(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getName(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getName(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getOwner(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getOwner(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getPublicResolver(overrides?: CallOverrides): Promise<string>;

    "getResolver(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getResolver(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getTokenId(bytes)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenId(bytes,bytes,bytes)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenId(bytes,bytes)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenRecord(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, string] & {
        kind: number;
        tld: string;
        domain: string;
        host: string;
      }
    >;

    getTtl(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    "getUser(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getUser(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getUserExpiry(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserExpiry(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWrapper(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { enable: boolean; address_: string }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isEnable(tld: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "isExists(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isExists(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isExists(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isLive(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isLive(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOperator(bytes32,bytes32,bytes32,address)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOperator(bytes32,bytes32,address)"(
      name: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultWrapper(
      defaultWrapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnable(
      tld: BytesLike,
      enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExpiry(bytes32,bytes32,uint64)"(
      name: BytesLike,
      tld: BytesLike,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExpiry(bytes32,uint64)"(
      tld: BytesLike,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMortgage(mortgage: string, overrides?: CallOverrides): Promise<void>;

    "setOperator(bytes32,bytes32,address,bool)"(
      name: BytesLike,
      tld: BytesLike,
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOperator(bytes32,bytes32,bytes32,address,bool)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOwner(bytes32,bytes32,address)"(
      name: BytesLike,
      tld: BytesLike,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOwner(bytes32,address)"(
      tld: BytesLike,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicResolver(
      publicResolver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRecord(bytes,bytes,bytes,uint16)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      ttl: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRecord(bytes,bytes,address,address,uint64)"(
      name: BytesLike,
      tld: BytesLike,
      owner: string,
      resolver: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRecord(uint8[],bytes,address,address,uint64,bool,uint8)"(
      chains: BigNumberish[],
      tld: BytesLike,
      owner: string,
      resolver: string,
      expiry: BigNumberish,
      enable: boolean,
      class_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setResolver(bytes32,address)"(
      tld: BytesLike,
      resolver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setResolver(bytes32,bytes32,address)"(
      name: BytesLike,
      tld: BytesLike,
      resolver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUser(bytes32,bytes32,address,uint64)"(
      name: BytesLike,
      tld: BytesLike,
      user: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUser(bytes32,bytes32,bytes32,address,uint64)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      user: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWrapper(
      tld: BytesLike,
      enable_: boolean,
      wrapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unsetRecord(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DomainBridged(bytes32,bytes32,uint8)"(
      name?: null,
      tld?: null,
      dstChain?: null
    ): TypedEventFilter<
      [string, string, number],
      { name: string; tld: string; dstChain: number }
    >;

    DomainBridged(
      name?: null,
      tld?: null,
      dstChain?: null
    ): TypedEventFilter<
      [string, string, number],
      { name: string; tld: string; dstChain: number }
    >;

    "NewDomain(bytes,bytes,address,uint64)"(
      name?: null,
      tld?: null,
      owner?: null,
      expiry?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { name: string; tld: string; owner: string; expiry: BigNumber }
    >;

    NewDomain(
      name?: null,
      tld?: null,
      owner?: null,
      expiry?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { name: string; tld: string; owner: string; expiry: BigNumber }
    >;

    "NewHost(bytes,bytes,bytes,uint16)"(
      host?: null,
      name?: null,
      tld?: null,
      ttl?: null
    ): TypedEventFilter<
      [string, string, string, number],
      { host: string; name: string; tld: string; ttl: number }
    >;

    NewHost(
      host?: null,
      name?: null,
      tld?: null,
      ttl?: null
    ): TypedEventFilter<
      [string, string, string, number],
      { host: string; name: string; tld: string; ttl: number }
    >;

    "NewTld(uint8,bytes,address)"(
      class_?: null,
      tld?: null,
      owner?: null
    ): TypedEventFilter<
      [number, string, string],
      { class_: number; tld: string; owner: string }
    >;

    NewTld(
      class_?: null,
      tld?: null,
      owner?: null
    ): TypedEventFilter<
      [number, string, string],
      { class_: number; tld: string; owner: string }
    >;

    "RemoveDomain(bytes32,bytes32)"(
      name?: null,
      tld?: null
    ): TypedEventFilter<[string, string], { name: string; tld: string }>;

    RemoveDomain(
      name?: null,
      tld?: null
    ): TypedEventFilter<[string, string], { name: string; tld: string }>;

    "RemoveHost(bytes32,bytes32,bytes32)"(
      host?: null,
      name?: null,
      tld?: null
    ): TypedEventFilter<
      [string, string, string],
      { host: string; name: string; tld: string }
    >;

    RemoveHost(
      host?: null,
      name?: null,
      tld?: null
    ): TypedEventFilter<
      [string, string, string],
      { host: string; name: string; tld: string }
    >;

    "RemoveTld(bytes32)"(
      tld?: null
    ): TypedEventFilter<[string], { tld: string }>;

    RemoveTld(tld?: null): TypedEventFilter<[string], { tld: string }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "SetDefaultWrapper(address)"(
      wrapper?: null
    ): TypedEventFilter<[string], { wrapper: string }>;

    SetDefaultWrapper(
      wrapper?: null
    ): TypedEventFilter<[string], { wrapper: string }>;

    "SetDomainExpiry(bytes32,bytes32,uint64)"(
      name?: null,
      tld?: null,
      expiry?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { name: string; tld: string; expiry: BigNumber }
    >;

    SetDomainExpiry(
      name?: null,
      tld?: null,
      expiry?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { name: string; tld: string; expiry: BigNumber }
    >;

    "SetDomainOperator(bytes32,bytes32,address,bool)"(
      name?: null,
      tld?: null,
      operator?: null,
      approved?: null
    ): TypedEventFilter<
      [string, string, string, boolean],
      { name: string; tld: string; operator: string; approved: boolean }
    >;

    SetDomainOperator(
      name?: null,
      tld?: null,
      operator?: null,
      approved?: null
    ): TypedEventFilter<
      [string, string, string, boolean],
      { name: string; tld: string; operator: string; approved: boolean }
    >;

    "SetDomainOwner(bytes32,bytes32,address)"(
      name?: null,
      tld?: null,
      owner?: null
    ): TypedEventFilter<
      [string, string, string],
      { name: string; tld: string; owner: string }
    >;

    SetDomainOwner(
      name?: null,
      tld?: null,
      owner?: null
    ): TypedEventFilter<
      [string, string, string],
      { name: string; tld: string; owner: string }
    >;

    "SetDomainResolver(bytes32,bytes32,address)"(
      name?: null,
      tld?: null,
      newResolver?: null
    ): TypedEventFilter<
      [string, string, string],
      { name: string; tld: string; newResolver: string }
    >;

    SetDomainResolver(
      name?: null,
      tld?: null,
      newResolver?: null
    ): TypedEventFilter<
      [string, string, string],
      { name: string; tld: string; newResolver: string }
    >;

    "SetDomainUser(bytes32,bytes32,address,uint64)"(
      name?: null,
      tld?: null,
      newUser?: null,
      expiry?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { name: string; tld: string; newUser: string; expiry: BigNumber }
    >;

    SetDomainUser(
      name?: null,
      tld?: null,
      newUser?: null,
      expiry?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { name: string; tld: string; newUser: string; expiry: BigNumber }
    >;

    "SetHostOperator(bytes32,bytes32,bytes32,address,bool)"(
      host?: null,
      name?: null,
      tld?: null,
      operator?: null,
      approved?: null
    ): TypedEventFilter<
      [string, string, string, string, boolean],
      {
        host: string;
        name: string;
        tld: string;
        operator: string;
        approved: boolean;
      }
    >;

    SetHostOperator(
      host?: null,
      name?: null,
      tld?: null,
      operator?: null,
      approved?: null
    ): TypedEventFilter<
      [string, string, string, string, boolean],
      {
        host: string;
        name: string;
        tld: string;
        operator: string;
        approved: boolean;
      }
    >;

    "SetHostUser(bytes32,bytes32,bytes32,address,uint64)"(
      host?: null,
      name?: null,
      tld?: null,
      newUser?: null,
      expiry?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        host: string;
        name: string;
        tld: string;
        newUser: string;
        expiry: BigNumber;
      }
    >;

    SetHostUser(
      host?: null,
      name?: null,
      tld?: null,
      newUser?: null,
      expiry?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        host: string;
        name: string;
        tld: string;
        newUser: string;
        expiry: BigNumber;
      }
    >;

    "SetMortgage(address)"(
      mortgage?: null
    ): TypedEventFilter<[string], { mortgage: string }>;

    SetMortgage(
      mortgage?: null
    ): TypedEventFilter<[string], { mortgage: string }>;

    "SetPublicResolver(address)"(
      resolver?: null
    ): TypedEventFilter<[string], { resolver: string }>;

    SetPublicResolver(
      resolver?: null
    ): TypedEventFilter<[string], { resolver: string }>;

    "SetTldEnable(bytes32,bool)"(
      tld?: null,
      enable?: null
    ): TypedEventFilter<[string, boolean], { tld: string; enable: boolean }>;

    SetTldEnable(
      tld?: null,
      enable?: null
    ): TypedEventFilter<[string, boolean], { tld: string; enable: boolean }>;

    "SetTldExpiry(bytes32,uint64)"(
      tld?: null,
      expiry?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { tld: string; expiry: BigNumber }
    >;

    SetTldExpiry(
      tld?: null,
      expiry?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { tld: string; expiry: BigNumber }
    >;

    "SetTldOwner(bytes32,address)"(
      tld?: null,
      owner?: null
    ): TypedEventFilter<[string, string], { tld: string; owner: string }>;

    SetTldOwner(
      tld?: null,
      owner?: null
    ): TypedEventFilter<[string, string], { tld: string; owner: string }>;

    "SetTldResolver(bytes32,address)"(
      tld?: null,
      resolver?: null
    ): TypedEventFilter<[string, string], { tld: string; resolver: string }>;

    SetTldResolver(
      tld?: null,
      resolver?: null
    ): TypedEventFilter<[string, string], { tld: string; resolver: string }>;

    "SetTldWrapper(bytes32,address,bool)"(
      tld?: null,
      wrapper?: null,
      enable?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { tld: string; wrapper: string; enable: boolean }
    >;

    SetTldWrapper(
      tld?: null,
      wrapper?: null,
      enable?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { tld: string; wrapper: string; enable: boolean }
    >;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    BRIDGE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    REGISTRAR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    WRAPPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    bridge(
      name: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChains(tld: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getClass(tld: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    "getExpiry(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getExpiry(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getMortgage(overrides?: CallOverrides): Promise<BigNumber>;

    "getName(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getName(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getName(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOwner(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOwner(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicResolver(overrides?: CallOverrides): Promise<BigNumber>;

    "getResolver(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getResolver(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenId(bytes)"(
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getTokenId(bytes,bytes,bytes)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getTokenId(bytes,bytes)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokenRecord(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTtl(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUser(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUser(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserExpiry(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserExpiry(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWrapper(tld: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEnable(tld: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "isExists(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isExists(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isExists(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isLive(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isLive(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOperator(bytes32,bytes32,bytes32,address)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOperator(bytes32,bytes32,address)"(
      name: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultWrapper(
      defaultWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnable(
      tld: BytesLike,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setExpiry(bytes32,bytes32,uint64)"(
      name: BytesLike,
      tld: BytesLike,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setExpiry(bytes32,uint64)"(
      tld: BytesLike,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMortgage(
      mortgage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOperator(bytes32,bytes32,address,bool)"(
      name: BytesLike,
      tld: BytesLike,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOperator(bytes32,bytes32,bytes32,address,bool)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOwner(bytes32,bytes32,address)"(
      name: BytesLike,
      tld: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOwner(bytes32,address)"(
      tld: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicResolver(
      publicResolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRecord(bytes,bytes,bytes,uint16)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      ttl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRecord(bytes,bytes,address,address,uint64)"(
      name: BytesLike,
      tld: BytesLike,
      owner: string,
      resolver: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRecord(uint8[],bytes,address,address,uint64,bool,uint8)"(
      chains: BigNumberish[],
      tld: BytesLike,
      owner: string,
      resolver: string,
      expiry: BigNumberish,
      enable: boolean,
      class_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setResolver(bytes32,address)"(
      tld: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setResolver(bytes32,bytes32,address)"(
      name: BytesLike,
      tld: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setUser(bytes32,bytes32,address,uint64)"(
      name: BytesLike,
      tld: BytesLike,
      user: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setUser(bytes32,bytes32,bytes32,address,uint64)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      user: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWrapper(
      tld: BytesLike,
      enable_: boolean,
      wrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unsetRecord(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BRIDGE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REGISTRAR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WRAPPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridge(
      name: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChains(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClass(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getExpiry(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExpiry(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGracePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMortgage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getName(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getName(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getName(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOwner(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOwner(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getResolver(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getResolver(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenId(bytes)"(
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getTokenId(bytes,bytes,bytes)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getTokenId(bytes,bytes)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokenRecord(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTtl(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUser(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUser(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserExpiry(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserExpiry(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWrapper(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEnable(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isExists(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isExists(bytes32)"(
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isExists(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLive(bytes32,bytes32)"(
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLive(bytes32,bytes32,bytes32)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOperator(bytes32,bytes32,bytes32,address)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOperator(bytes32,bytes32,address)"(
      name: BytesLike,
      tld: BytesLike,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultWrapper(
      defaultWrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnable(
      tld: BytesLike,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setExpiry(bytes32,bytes32,uint64)"(
      name: BytesLike,
      tld: BytesLike,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setExpiry(bytes32,uint64)"(
      tld: BytesLike,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMortgage(
      mortgage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOperator(bytes32,bytes32,address,bool)"(
      name: BytesLike,
      tld: BytesLike,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOperator(bytes32,bytes32,bytes32,address,bool)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOwner(bytes32,bytes32,address)"(
      name: BytesLike,
      tld: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOwner(bytes32,address)"(
      tld: BytesLike,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicResolver(
      publicResolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRecord(bytes,bytes,bytes,uint16)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      ttl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRecord(bytes,bytes,address,address,uint64)"(
      name: BytesLike,
      tld: BytesLike,
      owner: string,
      resolver: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRecord(uint8[],bytes,address,address,uint64,bool,uint8)"(
      chains: BigNumberish[],
      tld: BytesLike,
      owner: string,
      resolver: string,
      expiry: BigNumberish,
      enable: boolean,
      class_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setResolver(bytes32,address)"(
      tld: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setResolver(bytes32,bytes32,address)"(
      name: BytesLike,
      tld: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setUser(bytes32,bytes32,address,uint64)"(
      name: BytesLike,
      tld: BytesLike,
      user: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setUser(bytes32,bytes32,bytes32,address,uint64)"(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      user: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWrapper(
      tld: BytesLike,
      enable_: boolean,
      wrapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unsetRecord(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
