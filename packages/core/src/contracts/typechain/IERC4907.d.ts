/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IERC4907Interface extends ethers.utils.Interface {
  functions: {
    "setUser(uint256,address,uint64)": FunctionFragment;
    "userExpiry(uint256)": FunctionFragment;
    "userOf(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "setUser",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userExpiry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userOf",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "setUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userExpiry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userOf", data: BytesLike): Result;

  events: {
    "UpdateUser(uint256,address,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdateUser"): EventFragment;
}

export type UpdateUserEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    tokenId: BigNumber;
    user: string;
    expiry: BigNumber;
  }
>;

export class IERC4907 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IERC4907Interface;

  functions: {
    setUser(
      tokenId: BigNumberish,
      user: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userExpiry(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  setUser(
    tokenId: BigNumberish,
    user: string,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userExpiry(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    setUser(
      tokenId: BigNumberish,
      user: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userExpiry(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "UpdateUser(uint256,address,uint64)"(
      tokenId?: BigNumberish | null,
      user?: string | null,
      expiry?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { tokenId: BigNumber; user: string; expiry: BigNumber }
    >;

    UpdateUser(
      tokenId?: BigNumberish | null,
      user?: string | null,
      expiry?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { tokenId: BigNumber; user: string; expiry: BigNumber }
    >;
  };

  estimateGas: {
    setUser(
      tokenId: BigNumberish,
      user: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userExpiry(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setUser(
      tokenId: BigNumberish,
      user: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userExpiry(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
