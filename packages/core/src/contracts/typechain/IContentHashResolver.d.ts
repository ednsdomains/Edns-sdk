/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IContentHashResolverInterface extends ethers.utils.Interface {
  functions: {
    "getContentHash(bytes,bytes,bytes)": FunctionFragment;
    "getTypedContentHash(bytes,bytes,bytes,uint8)": FunctionFragment;
    "setContentHash(string,string,string,bytes)": FunctionFragment;
    "setTypedContentHash(string,string,string,uint8,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getContentHash",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTypedContentHash",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContentHash",
    values: [string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTypedContentHash",
    values: [string, string, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getContentHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypedContentHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContentHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTypedContentHash",
    data: BytesLike
  ): Result;

  events: {
    "SetContentHash(bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetContentHash"): EventFragment;
}

export type SetContentHashEvent = TypedEvent<
  [string, string] & { node: string; hash: string }
>;

export class IContentHashResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IContentHashResolverInterface;

  functions: {
    getContentHash(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTypedContentHash(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setContentHash(
      host: string,
      name: string,
      tld: string,
      hash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTypedContentHash(
      host: string,
      name: string,
      tld: string,
      type_: BigNumberish,
      hash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getContentHash(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getTypedContentHash(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    type_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setContentHash(
    host: string,
    name: string,
    tld: string,
    hash: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTypedContentHash(
    host: string,
    name: string,
    tld: string,
    type_: BigNumberish,
    hash: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getContentHash(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getTypedContentHash(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setContentHash(
      host: string,
      name: string,
      tld: string,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setTypedContentHash(
      host: string,
      name: string,
      tld: string,
      type_: BigNumberish,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetContentHash(bytes32,bytes)"(
      node?: BytesLike | null,
      hash?: null
    ): TypedEventFilter<[string, string], { node: string; hash: string }>;

    SetContentHash(
      node?: BytesLike | null,
      hash?: null
    ): TypedEventFilter<[string, string], { node: string; hash: string }>;
  };

  estimateGas: {
    getContentHash(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTypedContentHash(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setContentHash(
      host: string,
      name: string,
      tld: string,
      hash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTypedContentHash(
      host: string,
      name: string,
      tld: string,
      type_: BigNumberish,
      hash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getContentHash(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTypedContentHash(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContentHash(
      host: string,
      name: string,
      tld: string,
      hash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTypedContentHash(
      host: string,
      name: string,
      tld: string,
      type_: BigNumberish,
      hash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
